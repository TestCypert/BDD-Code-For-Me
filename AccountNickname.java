/* 
 * Click on the Account Nickname. Fetch the existing nickname. 
 * Edit and save the nickname using the string generated by random string generator. 
 * Validate success message. 
 * Update the new nickname again with the original value.
*/

package com.boi.grp.pageobjects.Accounts;

import java.util.List;

import org.junit.Assert;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.PageFactory;
import com.boi.grp.pageobjects.BasePageForAllPlatform;
import com.boi.grp.utilities.UIResusableLibrary;

import io.qameta.allure.Allure;
import io.qameta.allure.model.Status;

public class AccountNickname extends BasePageForAllPlatform {
	public AccountOptions accOpt;
	public UIResusableLibrary cafFunctional;
	String currentNickname, newNickname;
	By accNickEditBtn = getObject("accNick.btnEditNickname");
	By accNickSuccessMsg = getObject("accNick.TxtSuccessMsg");
	By originalNickname = getObject("accNick.txtCurentNickname");
	By accNickTxtBox = getObject("accNick.txtboxNickname");
	By accNickSaveBtn = getObject("accNick.btnSaveNickname");
	String nicknameUpdateSuccessMsg = getMessageText("acc.nicknameUpdateSuccessMsg", "UXPBANKING365");

	public AccountNickname(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
		cafFunctional = new UIResusableLibrary(driver);
		accOpt = new AccountOptions(driver);
	}

	/*---------------------------------Start <ACC_NickName>----------------------------------------
	Function Name: ACC_NickName
	Argument Name:
	Purpose: Validate update account nickname functionality.
	Author Name: CAF Automation 
	 Create Date: 23-04-2021
	Modified Date| Modified By  |Modified purpose 
	  29/04/2021      C114323     Code update
	-----------------------------------End <ACC_NickName>---------------------------------------
	*/

	public void ACC_NickName_P() {
		try {
			accOpt.ACC_NavigateTO("ACCOUNT_NICKNAME");
			logMessage("Verify and update account nickname : START");
			currentNickname = getCurrentNickname(); // Fetch the current
													// nickname of account
			isElementDisplayed(accNickEditBtn);
			newNickname = generateRandomString();
			UpdateNickname(newNickname); // Update nickname with randomly
											// generated string
			isElementDisplayed(accNickSuccessMsg);
			String actualMessage = getText(accNickSuccessMsg);
			Assert.assertEquals(nicknameUpdateSuccessMsg, actualMessage);
			UpdateNickname(currentNickname); // Update nickname with original
												// name of account
			actualMessage = getText(accNickSuccessMsg);
			logMessage("ACTUAL MESSAGE : " + actualMessage); // TODO Remove ths
																// line
			Assert.assertEquals(nicknameUpdateSuccessMsg, actualMessage);
			logMessage("Verify and update account nickname : END");
			injectMessageToCucumberReport("Account nickname update completed");
			appendScreenshotToCucumberReport();
			Allure.step("Success in updating acount nickname" + newNickname, Status.PASSED);
		} catch (Exception e) {
			logError("Error occured inside ACC_NickName" + e.getMessage());
			injectWarningMessageToCucumberReport("Failure in updating acount nickname" + e.getMessage());
			appendScreenshotToCucumberReport();
			Allure.step("Failure in updating acount nickname" + newNickname, Status.FAILED);
		}
	}

	// Fetch current account nickname
	private String getCurrentNickname() throws Exception {
		String currentNickname = getText(originalNickname);
		logMessage("Current Nickname is :" + currentNickname);
		return (currentNickname);
	}

	// Update new nickname
	private void UpdateNickname(String newNickname) {
		try {
			clickJS(accNickEditBtn);
			Thread.sleep(2000);
			setValue(accNickTxtBox, newNickname);
			clickJS(accNickSaveBtn);
			logMessage("New nickname updated : " + newNickname);
		} catch (Exception e) {
			logMessage("Error inside UpdateNickname()" + e.getMessage());
		}
	}
}
